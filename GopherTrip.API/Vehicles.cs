// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GopherTrip.API;
//
//    var vehicles = Vehicles.FromJson(jsonString);

namespace GopherTrip.API
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;

    public partial class Vehicles
    {
        [JsonProperty("vehicle")]
        public List<Vehicle> Vehicle { get; set; }

        [JsonProperty("success")]
        public bool Success { get; set; }
    }

    public partial class Vehicle
    {
        [JsonProperty("vehicleID")]
        public long VehicleId { get; set; }

        [JsonProperty("routeID")]
        public long RouteId { get; set; }

        [JsonProperty("tripID")]
        public long TripId { get; set; }

        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lng")]
        public double Lng { get; set; }

        [JsonProperty("course")]
        public long Course { get; set; }

        [JsonProperty("oos")]
        public long Oos { get; set; }

        [JsonProperty("speed")]
        public long Speed { get; set; }

        [JsonProperty("altitude")]
        public long Altitude { get; set; }

        [JsonProperty("verticalSpeed")]
        public long VerticalSpeed { get; set; }

        [JsonProperty("minsLate")]
        public long MinsLate { get; set; }

        [JsonProperty("icon")]
        public long Icon { get; set; }

        [JsonProperty("vehicleName")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long VehicleName { get; set; }

        [JsonProperty("vehicleType")]
        public string VehicleType { get; set; }

        [JsonProperty("HasAPC")]
        public long HasApc { get; set; }

        [JsonProperty("APCPercentage")]
        public long ApcPercentage { get; set; }

        [JsonProperty("nextStopID")]
        public long NextStopId { get; set; }

        [JsonProperty("nextStopETA")]
        public long NextStopEta { get; set; }

        [JsonProperty("lastUpdated")]
        public long LastUpdated { get; set; }

        [JsonProperty("minsLateLastUpdated")]
        public long MinsLateLastUpdated { get; set; }

        [JsonProperty("updated")]
        public long Updated { get; set; }

        [JsonProperty("vehicleState")]
        public long VehicleState { get; set; }
    }

    public partial class Vehicles
    {
        public static Vehicles FromJson(string json) => JsonConvert.DeserializeObject<Vehicles>(json, GopherTrip.API.Converter.Settings);
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}

